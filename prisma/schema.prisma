generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  clerkId    String    @unique
  email      String    @unique //if db already contains the email update different fields when user-sync action is invoked #error fixed
  firstName  String
  lastName   String
  fullName   String?
  avatar     String?
  role       UserRole  @default(USER)
  phone      String?
  isVerified Boolean   @default(false)
  isBanned   Boolean   @default(false)
  lastLogin  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  bookings      Booking[]
  facilities    Facility[]
  reviews       Review[]
  reports       Report[]   @relation("ReportedBy")
  reportTargets Report[]   @relation("ReportTarget")
  roleRequests  RoleRequest[]

  @@map("users")
}

model RoleRequest {
  id              String            @id @default(uuid())
  requestedRole   UserRole
  reason          String?
  status          RoleRequestStatus @default(PENDING)
  adminComments   String?
  reviewedAt      DateTime?
  reviewedById    String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  userId     String
  user       User   @relation(fields: [userId], references: [id])

  @@map("role_requests")
}

model Facility {
  id              String         @id @default(uuid())
  name            String
  description     String?
  address         String
  city            String
  state           String
  zipCode         String
  phone           String?
  email           String?
  website         String?
  sportsTypes     String // JSON array of sports supported
  amenities       String? // JSON array of amenities
  images          String? // JSON array of image URLs
  operatingHours  String? // JSON object with daily hours
  status          FacilityStatus @default(PENDING)
  rejectionReason String?
  rating          Float?         @default(0)
  totalReviews    Int            @default(0)
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  ownerId      String
  owner        User              @relation(fields: [ownerId], references: [id])
  courts       Court[]
  bookings     Booking[]
  reviews      Review[]
  reports      Report[]
  blockedSlots BlockedTimeSlot[]

  @@map("facilities")
}

model Court {
  id           String   @id @default(uuid())
  name         String
  sportType    String // "badminton", "tennis", "basketball", etc.
  pricePerHour Float
  description  String?
  images       String? // JSON array of court-specific images
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  facilityId   String
  facility     Facility          @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  bookings     Booking[]
  blockedSlots BlockedTimeSlot[]

  @@map("courts")
}

model Booking {
  id              String        @id @default(uuid())
  bookingDate     DateTime
  startTime       String // "09:00"
  endTime         String // "10:00"
  duration        Int // in hours
  pricePerHour    Float
  totalPrice      Float
  status          BookingStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  
  // Queue and priority fields
  queuePosition   Int?          // Position in queue (1 = highest priority)
  isInQueue       Boolean       @default(false)
  queueExpiresAt  DateTime?     // When queue position expires
  paymentStartedAt DateTime?    // When user started payment process
  paymentExpiresAt DateTime?    // Payment timeout (10 minutes)
  
  notes           String?
  cancelReason    String?
  rejectionReason String?
  approvedAt      DateTime?
  rejectedAt      DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id])
  courtId    String
  court      Court    @relation(fields: [courtId], references: [id])

  @@map("bookings")
}

model Review {
  id          String   @id @default(uuid())
  rating      Int // 1-5 stars
  comment     String?
  isAnonymous Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id])

  @@unique([userId, facilityId])
  @@map("reviews")
}

model BlockedTimeSlot {
  id          String   @id @default(uuid())
  date        DateTime
  startTime   String // "09:00"
  endTime     String // "10:00"
  reason      String // "maintenance", "private_event", etc.
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  facilityId String?
  facility   Facility? @relation(fields: [facilityId], references: [id])
  courtId    String?
  court      Court?    @relation(fields: [courtId], references: [id])

  @@map("blocked_time_slots")
}

model Report {
  id          String       @id @default(uuid())
  type        ReportType
  reason      String
  description String?
  status      ReportStatus @default(PENDING)
  resolution  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  reportedById String
  reportedBy   User      @relation("ReportedBy", fields: [reportedById], references: [id])
  targetUserId String?
  targetUser   User?     @relation("ReportTarget", fields: [targetUserId], references: [id])
  facilityId   String?
  facility     Facility? @relation(fields: [facilityId], references: [id])

  @@map("reports")
}

model Analytics {
  id               String   @id @default(uuid())
  date             DateTime
  totalBookings    Int      @default(0)
  totalRevenue     Float    @default(0)
  newUsers         Int      @default(0)
  activeFacilities Int      @default(0)
  popularSports    String? // JSON object with sport counts
  peakHours        String? // JSON object with hourly booking counts
  createdAt        DateTime @default(now())

  @@unique([date])
  @@map("analytics")
}

// Enums
enum UserRole {
  USER
  FACILITY_OWNER
  ADMIN
}

enum FacilityStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ReportType {
  USER
  FACILITY
  BOOKING
  OTHER
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum RoleRequestStatus {
  PENDING
  APPROVED
  REJECTED
}
